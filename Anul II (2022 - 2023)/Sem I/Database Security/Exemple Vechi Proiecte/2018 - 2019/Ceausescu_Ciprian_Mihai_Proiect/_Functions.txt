-- F U N C T I O N S

-- Vulnerable function to verify login. Will gain access to specific user without password or will dump all users from the database
CREATE OR REPLACE FUNCTION login_vn(em varchar, passwd varchar)
  RETURNS SETOF users AS
$func$
BEGIN
   RETURN QUERY EXECUTE
        'SELECT * FROM   users WHERE  email = ''' || em || ''' AND encrypted_password = crypt(''' || passwd || ''', encrypted_password)'
   USING em;
END
$func$  LANGUAGE plpgsql;


-- In table audit login.
-- Function will counter how many times an user do login
CREATE OR REPLACE FUNCTION audit_login(user_id integer) RETURNS void AS
$func$
DECLARE
  time_now timestamp;
BEGIN
   SELECT now() into time_now;
   UPDATE users set last_sign_in_at=time_now, 
                    sign_in_count=sign_in_count + 1 
   WHERE id = user_id;
END
$func$  LANGUAGE plpgsql;


-- safe login function wich not permit sql injection.
CREATE OR REPLACE function login_safe(em varchar, passwd varchar) RETURNS varchar AS $$
DECLARE
  nr_users integer;
  user_id integer;
BEGIN
  SELECT count(users.id), max(users.id) into nr_users, user_id FROM users 
  WHERE email = em AND encrypted_password = crypt(passwd, encrypted_password);

  IF nr_users <> 0 THEN
      EXECUTE audit_login(user_id);
      return 'Login success';
  ELSE
      return 'Login failed';
  END IF;
END
$$ LANGUAGE plpgsql;

-- Vulnerable search function. Attaker will be able to obtain users payment card number.
CREATE OR REPLACE FUNCTION cauta_produs_vuln(q text) RETURNS SETOF text AS 
$func$
  BEGIN
    RETURN QUERY EXECUTE
      'SELECT products.id::text || ''-->'' || products.name::text 
       FROM products 
       WHERE name ilike ''%' || q || '%'''
    USING q;
  END
$func$  LANGUAGE plpgsql;

-- SELECT cauta_produs_vuln('watch%'' UNION SELECT users.id::text || ''-->'' ||payment::text as payment from users;--''');

-- secure function to search products;
CREATE OR REPLACE FUNCTION cauta_produs_secure(q text) RETURNS products AS 
$func$
  DECLARE 
  prod products;
  BEGIN
    SELECT array_agg(products.name) into prod from products where name ilike '%' || q || '%';
    return prod;
  END
$func$  LANGUAGE plpgsql;

select cauta_produs_secure('apple');


-- functii aplicate pe produse in raport cu useri
-- SQL dynamic
CREATE OR REPLACE FUNCTION apply_functions(fn_name text) RETURNS setof text AS 
$func$
  DECLARE 
  result text;
  select_statement text;
  order_statement text;
  BEGIN
  IF(fn_name = 'avg') THEN
    select_statement = 'SELECT users.id::text || ''-->'' || avg(products.price)::text ';
    order_statement = ' ORDER BY avg(products.price) DESC';
  ELSIF (fn_name = 'sum') THEN
    select_statement = 'SELECT users.id::text || ''-->'' || sum(products.price)::text ';
    order_statement = ' ORDER BY sum(products.price) DESC';
  ELSIF (fn_name = 'count') THEN
    select_statement = 'SELECT users.id::text || ''-->'' || count(products.id)::text ';
    order_statement = ' ORDER BY count(products.id) DESC';
  ELSE
    RAISE WARNING 'No function available';
  END IF;

  RETURN QUERY EXECUTE
    select_statement || 'FROM products
             JOIN order_lines on order_lines.product_id = products.id
                                     JOIN users_orders on users_orders.order_id = order_lines.order_id
                                     JOIN users on users.id = users_orders.user_id
                                     group by users.id' 
                                  || order_statement;

  END
$func$  LANGUAGE plpgsql;