----- Teorie
create table student_ (
    id number primary key,
    last_name varchar2(30),
    first_name varchar2(30),
    current_year number,
    speciality varchar2(3),
    group_ number
);
create table subject (
    id number primary key,
    title varchar2(20)
);
create table exam (
    id number primary key, 
    subject_id number,
    exam_date date,
    constraint fk_ex2 foreign key (subject_id) references subject (id)
);
create table assessment (
    student_id number not null,
    exam_id number not null, 
    grade number(4,2) default -1,
    constraint pk_ev1 primary key (student_id, exam_id),
    constraint fk_ev1 foreign key (student_id) references student(id), 
    constraint fk_ex1 foreign key (exam_id) references exam(id)
);

insert into student_ values (1, 'A', 'Abc', 2, 'Inf', 231);
insert into student_ values(2, 'B', 'Bbc', 2, 'Inf', 231);
insert into subject values(1, 'Algebra');
insert into exam values(1, 1, sysdate - 700);
insert into exam values(2, 1, sysdate - 300);
insert into assessment values(1, 1, 3);
insert into assessment values(2, 1, 10);
insert into assessment values(1, 2, 9);
commit;
select * from student_;


-- Procedură Cursor Dinamic
CREATE OR REPLACE PROCEDURE PROC_CDYNAM(sql_query VARCHAR2) AS
  TYPE type_ref_c IS REF CURSOR;
  ref_c type_ref_c;
  v_string VARCHAR2(200);
BEGIN
    OPEN ref_c FOR sql_query;
    LOOP
        FETCH ref_c INTO v_string;
        EXIT WHEN ref_c%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('STUDENT: ' || v_string);
    END LOOP;
    CLOSE ref_c;
END;
/

-- Dăm privilegii asupra procedurii create
grant execute on proc_cdynam to elearn_assistent3;





-- Procedură EXECUTE IMMEDIATE Vulnerabilă
CREATE OR REPLACE PROCEDURE PROC_DYNAM(sql_query VARCHAR2) AS
  TYPE solutions_table IS TABLE OF ELEARN_APP_ADMIN.SOLVES%ROWTYPE;
  v_table solutions_table;
BEGIN
    EXECUTE IMMEDIATE(sql_query) BULK COLLECT INTO v_table;
    FOR i IN 1..v_table.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('STUDENT:'||v_table(i).STUDENT_ID ||' HAS THE GRADE:' 
        || NVL(v_table(i).GRADE,0) || ' AT THE HOMEWORK:' || v_table(i).HOMEWORK_ID);
    END LOOP;
END;
/
GRANT EXECUTE ON PROC_DYNAM TO ELEARN_professor1;
select * from solves;





-- Procedură EXECUTE IMMEDIATE FIXED
CREATE OR REPLACE PROCEDURE PROC_DYNAM(sql_query VARCHAR2) AUTHID CURRENT_USER AS
  TYPE solutions_table IS TABLE OF ELEARN_APP_ADMIN.SOLVES%ROWTYPE;
  v_table solutions_table;
BEGIN
    EXECUTE IMMEDIATE(sql_query) BULK COLLECT INTO v_table;
    FOR i IN 1..v_table.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('STUDENT:'||v_table(i).STUDENT_ID ||' HAS THE GRADE:' 
        || NVL(v_table(i).GRADE,0) || ' AT THE HOMEWORK:' || v_table(i).HOMEWORK_ID);
    END LOOP;
END;
/
GRANT EXECUTE ON PROC_DYNAM TO ELEARN_professor1;
-- Pt că am șters tabelul SOLVES anterior
INSERT INTO SOLVES (HOMEWORK_ID, STUDENT_ID, UPLOAD_DATE) VALUES(1, 2, SYSDATE - 3);
INSERT INTO SOLVES (HOMEWORK_ID, STUDENT_ID, UPLOAD_DATE) VALUES(2, 1, SYSDATE - 7);
COMMIT;
--





-- Procedură Regex Not Vulnerable
CREATE OR REPLACE PROCEDURE PROC_DYNAM(sql_query VARCHAR2) AUTHID CURRENT_USER AS
  TYPE solutions_table IS TABLE OF ELEARN_APP_ADMIN.SOLVES%ROWTYPE;
  v_table solutions_table;
  is_ok NUMBER(1) := 0;
BEGIN
    IF REGEXP_LIKE(sql_query,'SELECT [A-Za-z0-9*]+ [^;]') THEN
        is_ok:=1;
    END IF;
    IF is_ok = 1 THEN 
        BEGIN
            EXECUTE IMMEDIATE(sql_query) BULK COLLECT INTO v_table;
            FOR i IN 1..v_table.COUNT LOOP
            DBMS_OUTPUT.PUT_LINE('STUDENT:'||v_table(i).STUDENT_ID ||' HAS THE GRADE:' 
                                || NVL(v_table(i).GRADE,0) || ' AT THE HOMEWORK:' 
                                || v_table(i).HOMEWORK_ID);
            END LOOP;
        END;
    ELSE
        DBMS_OUTPUT.PUT_LINE('The command contains suspicious malicious code. Only queries are allowed');
    END IF;
END;
/
grant execute on proc_cdynam to elearn_assistent3;
GRANT DELETE ON ELEARN_APP_ADMIN.SOLVES TO ELEARN_professor1;
REVOKE DELETE ON ELEARN_APP_ADMIN.SOLVES FROM ELEARN_professor1;





-- SQL Injection
ALTER TABLE USER_ ADD PASSWORD VARCHAR2(32);

CREATE OR REPLACE FUNCTION encryption1(plain_text IN VARCHAR2)
RETURN VARCHAR2 AS
raw_string RAW(20);
raw_password RAW(20);
result RAW(20);
password VARCHAR2(20) := '12345678';
operating_mode NUMBER;
encrypted_text VARCHAR2(32);
BEGIN
raw_string:=utl_i18n.string_to_raw(plain_text,'AL32UTF8'); raw_password :=utl_i18n.string_to_raw(password,'AL32UTF8');
operating_mode := DBMS_CRYPTO.ENCRYPT_DES + DBMS_CRYPTO.PAD_ZERO + DBMS_CRYPTO.CHAIN_ECB;
result := DBMS_CRYPTO.ENCRYPT(raw_string, operating_mode,raw_password);
--dbms_output.put_line(result);
encrypted_text := RAWTOHEX(result);
RETURN encrypted_text;
END;
/

UPDATE USER_ SET PASSWORD=encryption1('Password1') WHERE ID=1;
UPDATE USER_ SET PASSWORD=encryption1('Password2') WHERE ID=2;
commit;


-- Login Vulnerable
CREATE OR REPLACE PROCEDURE
VERIFY_LOGIN (P_USERNAME VARCHAR2,P_PASSWORD VARCHAR2) AS
v_ok NUMBER(2) :=-1;
BEGIN
EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM USER_ WHERE USERNAME='''||P_USERNAME||''' AND PASSWORD=encryption1('''||P_PASSWORD||''')' INTO v_ok;
DBMS_OUTPUT.PUT_LINE('SELECT COUNT(*) FROM USER_ WHERE USERNAME='''||P_USERNAME||''' AND PAROLA=encryption1('''||P_PASSWORD||''')');
IF v_ok=0 THEN
DBMS_OUTPUT.PUT_LINE('VERIFICATION FAILED');
ELSE
DBMS_OUTPUT.PUT_LINE('VERIFICATION SUCCESSFUL');
END IF;
END;
/
EXEC VERIFY_LOGIN('ELEARN_STUDENT2','Password1'); --corect
EXEC VERIFY_LOGIN('ELEARN_STUDENT2','Password2'); --greșit
EXEC VERIFY_LOGIN('ELEARN_STUDENT2''---','Password5'); --SQL Injection


-- Login FIXED
CREATE OR REPLACE PROCEDURE
VERIFY_LOGIN_SAFE2 (P_USERNAME VARCHAR2,P_PASSWORD VARCHAR2) AS
v_ok NUMBER(2) :=-1;
BEGIN
EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM USER_ WHERE
USERNAME=:name AND PASSWORD=encryption1(:passwd)' INTO v_ok USING P_USERNAME,P_PASSWORD;
IF v_ok=0 THEN
DBMS_OUTPUT.PUT_LINE('VERIFICATION FAILED');
ELSE
DBMS_OUTPUT.PUT_LINE('VERIFICATION SUCCESSFUL');
END IF;
END;
/
EXEC VERIFY_LOGIN_SAFE2('ABRACADABRA99'' OR 1=1 --','HOCUS-POCUS'); -- nu merge
ALTER TABLE USER_ DROP COLUMN PASSWORD;